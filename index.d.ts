export interface PhonyData {
    alphaNumericLower: string;
    _alphaNumericLower(): string;
    alphaNumericUpper: string;
    _alphaNumericUpper(): string;
    boolean: boolean;
    _boolean(): boolean;
    byteHex: string;
    _byteHex(): string;
    byteValue: number;
    _byteValue(): number;
    capitalize(str: string): string;
    _capitalize(str: string): string;
    capitalizeFirst(str: string): string;
    _capitalizeFirst(str: string): string;
    capitalizeTitle(str: string): string;
    _capitalizeTitle(str: string): string;
    cssBasicColorName: string;
    _cssBasicColorName(): string;
    cssColorName: string;
    _cssColorName(): string;
    currencyValue: number;
    _currencyValue(): number;
    date: Date;
    _date: Date;
    dateFormat(format: string, d?: Date): string;
    _dateFormat(format: string, d?: Date): string;
    dateFuture: Date;
    _dateFuture: Date;
    datePast: Date;
    _datePast: Date;
    dateText(d?: Date): string;
    _dateText(d?: Date): string;
    dateTimeCondensed(d?: Date): string;
    _dateTimeCondensed(d?: Date): string;
    dateTimeOffset(d?: Date): string;
    _dateTimeOffset(d?: Date): string;
    dateTimeMinuteZ(d?: Date): string;
    _dateTimeMinuteZ(d?: Date): string;
    dateTimeZ(d?: Date): string;
    _dateTimeZ(d?: Date): string;
    define(name: object): void;
    define(name: string, generator: any): void;
    digit: string;
    _digit(): string;
    fileExtension: string;
    _fileExtension(): string;
    format(format: string): string;
    _format(format: string): string;
    formatGenerator(formats: string | string[]): () => string;
    hexLower: string;
    _hexLower(): string;
    hexUpper: string;
    _hexUpper(): string;
    index(items: number): number;
    _index(items: number): number;
    integer(min: number, max: number): number;
    _integer(min: number, max: number): number;
    letterLower: string;
    _letterLower(): string;
    letterUpper: string;
    _letterUpper(): string;
    loremSentence: string;
    _loremSentence(): string;
    loremSentenceFragment: string;
    _loremSentenceFragment(): string;
    loremTitle: string;
    _loremTitle(): string;
    loremTitleWords(num?: number): string;
    _loremTitleWords(num?: number): string;
    loremWord: string;
    _loremWord(): string;
    loremWords(num?: number): string;
    _loremWords(num?: number): string;
    mimeType: string;
    _mimeType(): string;
    parse(format: string): string;
    _parse(format: string): string;
    parseGenerator(formats: string | string[]): () => string;
    phoneNumber: string;
    _phoneNumber(): string;
    rgbHex: string;
    _rgbHex(): string;
    random: number;
    _random(): number;
    seed(seed?: number): void;
    _seed(seed?: number): void;
    sentence: string;
    _sentence(): string;
    sentencePunctuation: string;
    _sentencePunctuation(): string;
    sequenceGenerator(values: any[]): () => any;
    title: string;
    _title(): string;
    titleWords(num?: number): string;
    _titleWords(num?: number): string;
    toJson(thing: any): string;
    _toJson(thing: any): string;
    toString(thing: any): string;
    _toString(thing: any): string;
    word: string;
    _word(): string;
    words(num?: number): string;
    _words(num?: number): string;
}
export interface PhonyDataCollection {
    [key: string]: any;
}
export declare class PhonyData implements PhonyData {
    constructor();
}
